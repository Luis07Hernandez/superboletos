<?php

/**
 * @file
 * Primary module hooks for Prueba Module module.
 */

/**
 * Implements hook_theme().
 */
function prueba_module_theme($theme, $type, $module, $path)
{
  return [
    'paragraph__event' => [
      'base hook' => 'paragraph',
      'render element' => 'elements',
      'template' => 'paragraph--event',
    ],
    'views_view_unformatted__last_events__block_1' => [
      'base hook' => 'views_view',
      'render element' => 'elements',
      'template' => 'views-view-unformatted--last-events--block-1',
    ],
    'node__event__teaser' => [
      'base hook' => 'node',
      'render element' => 'elements',
      'template' => 'node--event--teaser',
    ],
    'paragraph__banners_list' => [
      'base hook' => 'paragraph',
      'render element' => 'elements',
      'template' => 'paragraph--banners-list',
    ],
    'contact_form' => [
      'render element' => 'form',
    ],
  ];
}

/**
 * Implements hook_preprocess_HOOK() for node templates.
 */
function prueba_module_preprocess_node(&$variables)
{
  $node = $variables['node'];

  // Get node bundle/type
  $node_bundle = $node->bundle();

  // Define the content types that this preprocess applies to.
  $valid_nodes = [
    'event',
  ];

  // Check if the current node type is one of the valid node types.
  if (in_array($node_bundle, $valid_nodes)) {

    $variables['node_url'] = $node->toUrl()->toString();
    $variables['node_title'] = $node->label();
    $variables['node_id'] = $node->id();

    // For media images, extract the URL and alt text and set them as variables.
    if ($node->hasField('field_media_image') && !$node->get('field_media_image')->isEmpty()) {
      $media = $node->get('field_media_image')->entity;
      if ($media) {
        $media_image_fields = ['field_media_image', 'field_media_image_1'];
        foreach ($media_image_fields as $media_image) {
          if ($media->hasField($media_image)) {
            $image = $media->get($media_image)->entity;
            if ($image) {
              $variables['image_url'] = $image->createFileUrl(FALSE);
              $variables['image_alt'] = $media->get($media_image)->alt ?? '';
              break;
            }
          }
        }
      }
    }

    // Map Drupal fields to template variables and set values if fields are not empty.
    $field_mappings = [
      'field__city' => 'node_city',
      'field_date' => 'node_date',
      'field_recinto' => 'node_recinto'
    ];

    foreach ($field_mappings as $field_name => $variable_name) {
      if ($node->hasField($field_name) && !$node->get($field_name)->isEmpty()) {
        $variables[$variable_name] = $node->get($field_name)->value;
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for paragraph templates.
 */
function prueba_module_preprocess_paragraph(&$variables)
{
  $paragraph = $variables['paragraph'];

  // Get paragraph bundle/type
  $paragraph_bundle = $paragraph->bundle();

  // Define the content types that this preprocess applies to.
  $valid_paragraph = [
    'event',
    'banners_list'
  ];

  // Check if the current paragraph type is one of the valid paragraph types.
  if (in_array($paragraph_bundle, $valid_paragraph)) {

    $variables['paragraph_id'] = $paragraph->id();

    // For media images, extract the URL and alt text and set them as variables.
    $mediaData = getMediaData($paragraph);
    $variables['image_url'] = $mediaData['image_url'] ?? null;
    $variables['image_alt'] = $mediaData['image_alt'] ?? null;

    // Map Drupal fields to template variables and set values if fields are not empty.
    $field_mappings = [
      'field_block_title' => 'paragraph_block_title',
      'field_title' => 'paragraph_title',
    ];

    foreach ($field_mappings as $field_name => $variable_name) {
      if ($paragraph->hasField($field_name) && !$paragraph->get($field_name)->isEmpty()) {
        $variables[$variable_name] = $paragraph->get($field_name)->value;
      }
    }

    //For Counter Up Features, extract the fields and set them as variables.
    if ($paragraph->hasField('field_banner_item') && !$paragraph->get('field_banner_item')->isEmpty()) {
      // Initialize an array to store Counter Up Feature values.
      $bannerItems = [];

      // Get the paragraph field.
      $paragraphs = $paragraph->get('field_banner_item')->referencedEntities();

      // Loop through each paragraph entity.
      foreach ($paragraphs as $paragraph) {
        // Extract values from the paragraph.
        $media = getMediaData($paragraph);
        $label = $paragraph->get('field_title')->value;

        // Add extracted values to the Counter Up Features array.
        $bannerItems[] = [
          'image' => $media ?? null,
          'label' => $label ?? null,
        ];
      }

      // Add the Counter Up Features array to the variables.
      $variables['paragraph_banner_items'] = $bannerItems;
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for paragraph entities of type 'event'.
 *
 * This function preprocesses paragraph entities of type 'event' and adds a
 * variable 'last_events_view' that embeds a specific View block.
 *
 * @param array $variables
 *   An associative array of variables to pass to the theme template.
 */
function prueba_module_preprocess_paragraph__event(&$variables)
{
  $variables['last_events_view'] = views_embed_view('last_events', 'block_1');
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for views_view_unformatted templates.
 *
 * This function alters theme suggestions for views_view_unformatted templates
 * based on the specific View and display being rendered.
 *
 * @param array $suggestions
 *   An array of suggested theme template names.
 * @param array $variables
 *   An associative array of variables for the view template.
 */
function prueba_module_theme_suggestions_views_view_unformatted_alter(array &$suggestions, array $variables)
{
  // Obtén el objeto de la vista y el nombre del display desde las variables.
  $view = $variables['view'];
  $display_id = $view->getDisplay()->display['id'];
  // Comprueba si es la vista y el display específicos.
  if ($view->id() == 'last_events' && $display_id == 'block_1') {
    $suggestions[] = 'views_view_unformatted__last_events__block_1';
  }
}

/**
 * Implements hook_form_alter().
 *
 * Modifies the exposed form of a Views block to attach a custom library.
 *
 * @param array $form
 *   The form array to be altered.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current form state.
 * @param string $form_id
 *   The ID of the form.
 */
function prueba_module_form_views_exposed_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id)
{
  if ($form['#id'] == 'views-exposed-form-last-events-block-1') {
    // librería personalizada que contiene CSS y JS.
    $form['#attached']['library'][] = 'prueba_module/convertSelectToButtons';
  }
}

/**
 * Retrieves data from a media entity and sets it as variables.
 *
 * For media images, this function extracts the URL and alt text from the
 * media entity and sets them as variables.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The media entity from which to retrieve data.
 *
 * @return array
 *   An associative array containing the following variables:
 *   - 'image_url': The URL of the media image.
 *   - 'image_alt': The alt text of the media image.
 */
function getMediaData($entity)
{
  $variables = [];
  // For media images, extract the URL and alt text and set them as variables.
  if ($entity->hasField('field_media_image') && !$entity->get('field_media_image')->isEmpty()) {
    $media = $entity->get('field_media_image')->entity;
    if ($media) {
      $media_image_fields = ['field_media_image', 'field_media_image_1'];
      foreach ($media_image_fields as $media_image) {
        if ($media->hasField($media_image)) {
          $image = $media->get($media_image)->entity;
          if ($image) {
            $variables['image_url'] = $image->createFileUrl(FALSE);
            $variables['image_alt'] = $media->get($media_image)->alt ?? '';
            break;
          }
        }
      }
    }
  }

  return $variables;
}

/**
 * Implements hook_preprocess_page().
 *
 * This function is invoked during the page preprocessing stage in Drupal.
 * It allows the modification of variables before they are passed to the page template.
 *
 * @param array $variables
 *   An associative array containing the variables passed to the page template.
 */
function prueba_module_preprocess_page(&$variables)
{
  // Check if the current page is not an admin page.
  if (!\Drupal::service('router.admin_context')->isAdminRoute()) {
    // Attach the Tailwind CSS library.
    // This library should be defined in the prueba_module.libraries.yml file.
    $variables['#attached']['library'][] = 'prueba_module/tailwindcss';

    // Attach a general library (can include CSS/JS) specific to prueba_module.
    // This library should also be defined in the prueba_module.libraries.yml file.
    $variables['#attached']['library'][] = 'prueba_module/style';
  }
}

/**
 * Implements hook_mail().
 *
 * Defines the properties of an email message. This function is called to
 * format an email message based on a specific key, allowing customization
 * of different email types sent by the module.
 *
 * @param string $key
 *   A key to identify the mail template being used.
 * @param array $message
 *   An associative array containing the components of the email message.
 * @param array $params
 *   An associative array containing additional parameters. Typically includes
 *   elements like 'subject' and 'body' of the email message.
 */
function prueba_module_mail($key, &$message, $params)
{
  switch ($key) {
    case 'general_mail':
      $message['from'] = \Drupal::config('system.site')->get('mail');
      $message['subject'] = $params['subject'];
      $message['body'][] = $params['body'];
      break;
  }
}
